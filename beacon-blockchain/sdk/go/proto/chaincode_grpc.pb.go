// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/chaincode.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChaincodeShim_GetState_FullMethodName                      = "/chaincode.ChaincodeShim/GetState"
	ChaincodeShim_PutState_FullMethodName                      = "/chaincode.ChaincodeShim/PutState"
	ChaincodeShim_DeleteState_FullMethodName                   = "/chaincode.ChaincodeShim/DeleteState"
	ChaincodeShim_GetStateByRange_FullMethodName               = "/chaincode.ChaincodeShim/GetStateByRange"
	ChaincodeShim_GetStateByPartialCompositeKey_FullMethodName = "/chaincode.ChaincodeShim/GetStateByPartialCompositeKey"
	ChaincodeShim_GetTransactionID_FullMethodName              = "/chaincode.ChaincodeShim/GetTransactionID"
	ChaincodeShim_GetChannelID_FullMethodName                  = "/chaincode.ChaincodeShim/GetChannelID"
	ChaincodeShim_GetCreator_FullMethodName                    = "/chaincode.ChaincodeShim/GetCreator"
	ChaincodeShim_GetTransactionTimestamp_FullMethodName       = "/chaincode.ChaincodeShim/GetTransactionTimestamp"
	ChaincodeShim_SetEvent_FullMethodName                      = "/chaincode.ChaincodeShim/SetEvent"
	ChaincodeShim_InvokeChaincode_FullMethodName               = "/chaincode.ChaincodeShim/InvokeChaincode"
	ChaincodeShim_LogMessage_FullMethodName                    = "/chaincode.ChaincodeShim/LogMessage"
)

// ChaincodeShimClient is the client API for ChaincodeShim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The chaincode shim service that allows Go chaincode to communicate with the Rust node
type ChaincodeShimClient interface {
	// State management operations
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*PutStateResponse, error)
	DeleteState(ctx context.Context, in *DeleteStateRequest, opts ...grpc.CallOption) (*DeleteStateResponse, error)
	// Range query operations
	GetStateByRange(ctx context.Context, in *GetStateByRangeRequest, opts ...grpc.CallOption) (*GetStateByRangeResponse, error)
	GetStateByPartialCompositeKey(ctx context.Context, in *GetStateByPartialCompositeKeyRequest, opts ...grpc.CallOption) (*GetStateByPartialCompositeKeyResponse, error)
	// Transaction context operations
	GetTransactionID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTransactionIDResponse, error)
	GetChannelID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetChannelIDResponse, error)
	GetCreator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCreatorResponse, error)
	GetTransactionTimestamp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTransactionTimestampResponse, error)
	// Event operations
	SetEvent(ctx context.Context, in *SetEventRequest, opts ...grpc.CallOption) (*SetEventResponse, error)
	// Invocation operations
	InvokeChaincode(ctx context.Context, in *InvokeChaincodeRequest, opts ...grpc.CallOption) (*InvokeChaincodeResponse, error)
	// Logging operations
	LogMessage(ctx context.Context, in *LogMessageRequest, opts ...grpc.CallOption) (*LogMessageResponse, error)
}

type chaincodeShimClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeShimClient(cc grpc.ClientConnInterface) ChaincodeShimClient {
	return &chaincodeShimClient{cc}
}

func (c *chaincodeShimClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) PutState(ctx context.Context, in *PutStateRequest, opts ...grpc.CallOption) (*PutStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutStateResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_PutState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) DeleteState(ctx context.Context, in *DeleteStateRequest, opts ...grpc.CallOption) (*DeleteStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStateResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_DeleteState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) GetStateByRange(ctx context.Context, in *GetStateByRangeRequest, opts ...grpc.CallOption) (*GetStateByRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateByRangeResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetStateByRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) GetStateByPartialCompositeKey(ctx context.Context, in *GetStateByPartialCompositeKeyRequest, opts ...grpc.CallOption) (*GetStateByPartialCompositeKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateByPartialCompositeKeyResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetStateByPartialCompositeKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) GetTransactionID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTransactionIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionIDResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetTransactionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) GetChannelID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetChannelIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelIDResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetChannelID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) GetCreator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCreatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreatorResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetCreator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) GetTransactionTimestamp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetTransactionTimestampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionTimestampResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_GetTransactionTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) SetEvent(ctx context.Context, in *SetEventRequest, opts ...grpc.CallOption) (*SetEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEventResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_SetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) InvokeChaincode(ctx context.Context, in *InvokeChaincodeRequest, opts ...grpc.CallOption) (*InvokeChaincodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvokeChaincodeResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_InvokeChaincode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeShimClient) LogMessage(ctx context.Context, in *LogMessageRequest, opts ...grpc.CallOption) (*LogMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogMessageResponse)
	err := c.cc.Invoke(ctx, ChaincodeShim_LogMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaincodeShimServer is the server API for ChaincodeShim service.
// All implementations must embed UnimplementedChaincodeShimServer
// for forward compatibility.
//
// The chaincode shim service that allows Go chaincode to communicate with the Rust node
type ChaincodeShimServer interface {
	// State management operations
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	PutState(context.Context, *PutStateRequest) (*PutStateResponse, error)
	DeleteState(context.Context, *DeleteStateRequest) (*DeleteStateResponse, error)
	// Range query operations
	GetStateByRange(context.Context, *GetStateByRangeRequest) (*GetStateByRangeResponse, error)
	GetStateByPartialCompositeKey(context.Context, *GetStateByPartialCompositeKeyRequest) (*GetStateByPartialCompositeKeyResponse, error)
	// Transaction context operations
	GetTransactionID(context.Context, *Empty) (*GetTransactionIDResponse, error)
	GetChannelID(context.Context, *Empty) (*GetChannelIDResponse, error)
	GetCreator(context.Context, *Empty) (*GetCreatorResponse, error)
	GetTransactionTimestamp(context.Context, *Empty) (*GetTransactionTimestampResponse, error)
	// Event operations
	SetEvent(context.Context, *SetEventRequest) (*SetEventResponse, error)
	// Invocation operations
	InvokeChaincode(context.Context, *InvokeChaincodeRequest) (*InvokeChaincodeResponse, error)
	// Logging operations
	LogMessage(context.Context, *LogMessageRequest) (*LogMessageResponse, error)
	mustEmbedUnimplementedChaincodeShimServer()
}

// UnimplementedChaincodeShimServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChaincodeShimServer struct{}

func (UnimplementedChaincodeShimServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedChaincodeShimServer) PutState(context.Context, *PutStateRequest) (*PutStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutState not implemented")
}
func (UnimplementedChaincodeShimServer) DeleteState(context.Context, *DeleteStateRequest) (*DeleteStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteState not implemented")
}
func (UnimplementedChaincodeShimServer) GetStateByRange(context.Context, *GetStateByRangeRequest) (*GetStateByRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateByRange not implemented")
}
func (UnimplementedChaincodeShimServer) GetStateByPartialCompositeKey(context.Context, *GetStateByPartialCompositeKeyRequest) (*GetStateByPartialCompositeKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateByPartialCompositeKey not implemented")
}
func (UnimplementedChaincodeShimServer) GetTransactionID(context.Context, *Empty) (*GetTransactionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionID not implemented")
}
func (UnimplementedChaincodeShimServer) GetChannelID(context.Context, *Empty) (*GetChannelIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelID not implemented")
}
func (UnimplementedChaincodeShimServer) GetCreator(context.Context, *Empty) (*GetCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreator not implemented")
}
func (UnimplementedChaincodeShimServer) GetTransactionTimestamp(context.Context, *Empty) (*GetTransactionTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTimestamp not implemented")
}
func (UnimplementedChaincodeShimServer) SetEvent(context.Context, *SetEventRequest) (*SetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEvent not implemented")
}
func (UnimplementedChaincodeShimServer) InvokeChaincode(context.Context, *InvokeChaincodeRequest) (*InvokeChaincodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeChaincode not implemented")
}
func (UnimplementedChaincodeShimServer) LogMessage(context.Context, *LogMessageRequest) (*LogMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogMessage not implemented")
}
func (UnimplementedChaincodeShimServer) mustEmbedUnimplementedChaincodeShimServer() {}
func (UnimplementedChaincodeShimServer) testEmbeddedByValue()                       {}

// UnsafeChaincodeShimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaincodeShimServer will
// result in compilation errors.
type UnsafeChaincodeShimServer interface {
	mustEmbedUnimplementedChaincodeShimServer()
}

func RegisterChaincodeShimServer(s grpc.ServiceRegistrar, srv ChaincodeShimServer) {
	// If the following call pancis, it indicates UnimplementedChaincodeShimServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChaincodeShim_ServiceDesc, srv)
}

func _ChaincodeShim_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_PutState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).PutState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_PutState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).PutState(ctx, req.(*PutStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_DeleteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).DeleteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_DeleteState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).DeleteState(ctx, req.(*DeleteStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_GetStateByRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateByRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetStateByRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetStateByRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetStateByRange(ctx, req.(*GetStateByRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_GetStateByPartialCompositeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateByPartialCompositeKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetStateByPartialCompositeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetStateByPartialCompositeKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetStateByPartialCompositeKey(ctx, req.(*GetStateByPartialCompositeKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_GetTransactionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetTransactionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetTransactionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetTransactionID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_GetChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetChannelID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetChannelID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_GetCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetCreator(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_GetTransactionTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).GetTransactionTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_GetTransactionTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).GetTransactionTimestamp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_SetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).SetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_SetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).SetEvent(ctx, req.(*SetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_InvokeChaincode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeChaincodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).InvokeChaincode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_InvokeChaincode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).InvokeChaincode(ctx, req.(*InvokeChaincodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeShim_LogMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeShimServer).LogMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeShim_LogMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeShimServer).LogMessage(ctx, req.(*LogMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChaincodeShim_ServiceDesc is the grpc.ServiceDesc for ChaincodeShim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChaincodeShim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chaincode.ChaincodeShim",
	HandlerType: (*ChaincodeShimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _ChaincodeShim_GetState_Handler,
		},
		{
			MethodName: "PutState",
			Handler:    _ChaincodeShim_PutState_Handler,
		},
		{
			MethodName: "DeleteState",
			Handler:    _ChaincodeShim_DeleteState_Handler,
		},
		{
			MethodName: "GetStateByRange",
			Handler:    _ChaincodeShim_GetStateByRange_Handler,
		},
		{
			MethodName: "GetStateByPartialCompositeKey",
			Handler:    _ChaincodeShim_GetStateByPartialCompositeKey_Handler,
		},
		{
			MethodName: "GetTransactionID",
			Handler:    _ChaincodeShim_GetTransactionID_Handler,
		},
		{
			MethodName: "GetChannelID",
			Handler:    _ChaincodeShim_GetChannelID_Handler,
		},
		{
			MethodName: "GetCreator",
			Handler:    _ChaincodeShim_GetCreator_Handler,
		},
		{
			MethodName: "GetTransactionTimestamp",
			Handler:    _ChaincodeShim_GetTransactionTimestamp_Handler,
		},
		{
			MethodName: "SetEvent",
			Handler:    _ChaincodeShim_SetEvent_Handler,
		},
		{
			MethodName: "InvokeChaincode",
			Handler:    _ChaincodeShim_InvokeChaincode_Handler,
		},
		{
			MethodName: "LogMessage",
			Handler:    _ChaincodeShim_LogMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chaincode.proto",
}
